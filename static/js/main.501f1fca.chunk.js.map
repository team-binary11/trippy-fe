{"version":3,"sources":["components/shared/Input/Calendar/index.tsx","components/shared/Input/AutoComplete/index.tsx","components/shared/Input/Timer/index.tsx","components/inputs/single/SingleJourney.tsx","Layout.tsx","App.tsx","serviceWorker.ts","redux/actions/inputs.ts","redux/reducers/inputs.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["ICalender","useState","date","setDate","minDate","Date","maxDate","getDate","console","log","className","value","onChange","e","IAutoComplete","selectedLocation","setLocation","filteredLocations","setFilteredLocations","allLocations","suggestions","completeMethod","event","setTimeout","query","trim","length","filter","location","toLowerCase","startsWith","ITimer","time","setTime","timeOnly","hourFormat","SingleJourney","htmlFor","Layout","App","Boolean","window","hostname","match","InputActionTypes","initial_state","departureTime","moment","departureDate","source","text","lat","long","destination","isRoundTrip","returnDate","returnTime","combineReducers","inputs","state","action","type","SetInputs","payload","createStore","rootReducer","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.501f1fca.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Calendar as PRCalendar } from 'primereact/calendar';\n\nfunction ICalender() {\n    let [date, setDate] = useState<Date | Date[] | undefined>()\n\n    const minDate = new Date();\n    let maxDate = new Date();\n    maxDate.setDate(maxDate.getDate() + 15);\n\n    return (\n        <>\n            {console.log(date)}\n            <div className=\"card\">\n                <div className=\"p-fluid p-grid p-formgrid\">\n                    <div className=\"p-field p-col-12 p-md-4\">\n                        {/* <label htmlFor=\"minmax\">Select Date</label> */}\n                        <PRCalendar value={date} onChange={(e) => setDate(e.value)} minDate={minDate} maxDate={maxDate} />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default ICalender;\n","import React, { useState } from 'react';\nimport { AutoComplete as PRAutoComplete  } from 'primereact/autocomplete';\n\nfunction IAutoComplete() {\n    let [selectedLocation, setLocation] = useState()\n    let [filteredLocations, setFilteredLocations] = useState<string[] | undefined>()\n    const allLocations: string[] = [\"Sirsa\", \"Delhi\", \"Patiala\", \"Gurgaon\", \"Shimla\"];\n\n\n    const searchLocation = (event: {\n        originalEvent: Event;\n        query: string;\n    }) => {\n        setTimeout(() => {\n            let filteredLocations;\n            if (!event.query.trim().length) {\n                filteredLocations = [...allLocations];\n            }\n            else {\n                filteredLocations = allLocations.filter((location) => {\n                    return location.toLowerCase().startsWith(event.query.toLowerCase());\n                });\n            }\n\n            setFilteredLocations(filteredLocations);\n        }, 250);\n    }\n\n    return (\n        <>\n            {console.log(selectedLocation)}\n            <div className=\"card\">\n                {/* <h5>Location</h5> */}\n                <PRAutoComplete value={selectedLocation} suggestions={filteredLocations} completeMethod={searchLocation} onChange={(e) => setLocation(e.value)} />\n            </div>\n        </>\n    );\n}\n\nexport default IAutoComplete;\n","import React, { useState } from 'react';\nimport { Calendar as PRCalendar } from 'primereact/calendar';\n\nfunction ITimer() {\n    let [time, setTime] = useState<Date | Date[] | undefined>()\n\n    return (\n        <>\n            {console.log(time)}\n            <div className=\"card\">\n                <div className=\"p-fluid p-grid p-formgrid\">\n                    <div className=\"p-field p-col-12 p-md-4\">\n                        {/* <label htmlFor=\"minmax\">Select Date</label> */}\n                        <PRCalendar value={time} onChange={(e) => setTime(e.value)} timeOnly hourFormat=\"12\" />\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default ITimer;\n","import React from 'react';\nimport ICalender from '../../shared/Input/Calendar';\nimport IAutoComplete from '../../shared/Input/AutoComplete';\nimport ITimer from '../../shared/Input/Timer';\n\nfunction SingleJourney() {\n    return (\n        <>\n            <h5>Single Journey Details</h5>\n            <div className=\"p-fluid p-formgrid p-grid\">\n                <div className=\"p-field p-col\">\n                    <label htmlFor=\"sourceLocation\">From</label>\n                    <IAutoComplete />\n                </div>\n                <div className=\"p-field p-col\">\n                    <label htmlFor=\"destinationLocation\">To</label>\n                    <IAutoComplete />\n                </div>\n                </div>\n                <div className=\"p-fluid p-formgrid p-grid\">\n                <div className=\"p-field p-col\">\n                    <label htmlFor=\"sourceLocation\">Pick A Date</label>\n                    <ICalender />\n                </div>\n                <div className=\"p-field p-col\">\n                    <label htmlFor=\"destinationLocation\">Choose Time</label>\n                    <ITimer />\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default SingleJourney;\n","import React from 'react';\nimport 'primereact/resources/themes/saga-blue/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport 'primeflex/primeflex.css';\n\nimport SingleJourney from './components/inputs/single/SingleJourney';\n\nconst Layout = () => (\n  <div className='p-pl-2 p-pr-2'>\n    <h1 className='p-shadow-3 p-text-center'>\n      Hi Tripster\n    </h1>\n    <SingleJourney />\n  </div>\n)\n\nexport default Layout;","import React from 'react';\nimport Layout from './Layout';\nfunction App() {\n  return (\n    <Layout />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { IInputs } from './../../lib/models/inputs';\n\nexport enum InputActionTypes {\n  SetInputs = '[Inputs] Set Input',\n}\n\nexport interface SetInputsAction {\n  type:  InputActionTypes.SetInputs;\n  payload: Partial<IInputs>;\n}\n\nexport type InputActions = SetInputsAction;","import moment from 'moment';\n\nimport { IInputs } from './../../lib/models/inputs';\nimport { InputActions, InputActionTypes} from '../actions';\nconst initial_state: IInputs = {\n  departureTime: moment(),\n  departureDate : moment(),\n  source: {\n    text: \"\",\n    lat: 0,\n    long: 0\n  },\n  destination: {\n    text: \"\",\n    lat: 0,\n    long: 0,\n  },\n  isRoundTrip: false,\n  returnDate: moment(),\n  returnTime: moment()\n};\n\nexport default (state: IInputs = initial_state, action: InputActions) => {\n  switch (action.type) {\n    case InputActionTypes.SetInputs: return {...state, ...action.payload};\n    default: return state;\n  }\n}","import { combineReducers } from \"redux\";\nimport inputs from './inputs';\n\nexport default combineReducers({ inputs });\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\n\nexport default createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}